install.packages('blogdown')
library(blogdown)
serve_site()
install_hugo()
serve_site()
serve_site()
library(blogdown)
install_hugo()
serve_site()
serve_site()
serve_site()
serve_site()
serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
hugo mod get
blogdown::serve_site()
blogdown::serve_site()
hugo mod get
hugo mod get
hugo mod
hugo mod clean
hugo mod get
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
hugo mod get
blogdown::serve_site()
blogdown::serve_site()
hugo mod
blogdown::serve_site()
hugo mod get
hugo mode get
library(blogdown)
hugo mod get
hugo mod get
blogdown::serve_site()
hugo server
blogdown::serve_site()
blogdown::serve_site()
blogdown::check_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
library(blogdown)
serve_site()
install.packages('blogdown')
install.packages("blogdown")
serve_site()
blogdown::serve_site()
blogdown::serve_site()
require (
github.com/wowchemy/wowchemy-hugo-themes/modules/wowchemy-plugin-netlify v1.0.0
github.com/wowchemy/wowchemy-hugo-themes/modules/wowchemy/v5 v5.6.0
)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
#Load them all
library(lidR)
library(raster)
library(sp)
library(moments)
library(rgdal)
#Install the necessary packages
install.packages("lidR")
#Load them all
library(lidR)
library(raster)
library(sp)
library(moments)
library(rgdal)
install.packages("moments")
library(moments)
#Install the necessary packages
install.packages("lidR")
#Load them all
library(lidR)
install.packages(c('rlas','rgl'))
#Load them all
library(lidR)
install.packages("lidR")
#Load them all
library(lidR)
install.packages("lidR")
#Load them all
library(lidR)
setwd('E:/TFM_Alex/')
# List of laz (las) files
listaLAS <- list.files("data/",
pattern = ".laz$",
full.names = T)
# List of names without path
names <- list.files("data",
pattern = ".laz$",
full.names = F)
# file names
names <- substr(names,1,nchar(names)-4)
names
# output folder (remember to create it before running the code)
out.dir <- "results/"
setwd(here::here())
#Install the necessary packages
install.packages('here')
here::here()
setwd(here::here())
# List of laz (las) files
listaLAS <- list.files("data/",
pattern = ".laz$",
full.names = T)
# List of names without path
names <- list.files("data",
pattern = ".laz$",
full.names = F)
# file names
names <- substr(names,1,nchar(names)-4)
# output folder (remember to create it before running the code)
out.dir <- "results/"
# Looping through lasz tiles
for (i in 1:length(listaLAS)) {
#Read single laz
las <- readLAS(listaLAS[i])
# Filter ground and vegetation returns
las <- filter_poi(las, Classification %in% c(2,3,4,5,8))
# Normalizing the point cloud
lasn <- normalize_height(las, knnidw(k = 8, p = 2))
# Cleansing outliers
las_filt <- filter_poi(lasn, lasn@data$Z>=0 & lasn@data$Z<=50)
#####################################################################
########## CALCULATIN METRICS ###############
#####################################################################
# Selection of returns above 4 meter height and all vegetation returns
filt_FCC1 <- filter_poi (las_filt, las_filt@data$ReturnNumber==1 & las_filt@data$Z>4)
filt_FCC2 <- filter_poi (las_filt, las_filt@data$ReturnNumber==1 )
f_FCC <- function(x) {FCC1=(length(x))}
r_FCC1 <- grid_metrics(filt_FCC1,f_FCC(Z),res=20)
r_FCC2 <- grid_metrics(filt_FCC2,f_FCC(Z),res=20)
# FCC
r_FCC <- (r_FCC1/r_FCC2)*100
writeRaster(r_FCC,paste0(out.dir,names[i],"_FCC.tif"))
#Tree height
f_p95 = function(x) {p95 = quantile(x, 0.95)}
r_p95 <- grid_metrics(las_filt, f_p95(Z), res = 20)
writeRaster(r_p95,paste0(out.dir,names[i],"_p95.tif"))
# Canopy Relief Ratio (CRR)
f_CRR <- function(x) {CRR=(mean(x)-min(x))/(max(x)-min(x))}
r_CRR <- grid_metrics(las_filt, f_CRR(Z))
writeRaster(r_CRR,paste0(out.dir,names[i],"_CRR.tif"))
# Asymetry and kurtosis
f_curt <- function(x) {kurt= kurtosis(x)}
r_curt <- grid_metrics(las_filt, f_curt(Z))
writeRaster(r_curt,paste0(out.dir,names[i],"_curt.tif"))
f_asimetria <- function(x) {asimetria= skewness(x)}
r_asimetria <- grid_metrics(las_filt, f_asimetria(Z))
writeRaster(r_asimetria,paste0(out.dir,names[i],"_asimetria.tif"))
print(paste0(i,"/",length(listaLAS)))
}
i
#Read single laz
las <- readLAS(listaLAS[i])
# Filter ground and vegetation returns
las <- filter_poi(las, Classification %in% c(2,3,4,5,8))
# Normalizing the point cloud
lasn <- normalize_height(las, knnidw(k = 8, p = 2))
# Normalizing the point cloud
lasn <- normalize_height(las, tin())
# Normalizing the point cloud
lasn <- normalize_height(las, knnidw())
plot(las)
# Normalizing the point cloud
lasn <- normalize_height(las, tin())
summary(las)
i<-3
#Read single laz
las <- readLAS(listaLAS[i])
# Filter ground and vegetation returns
las <- filter_poi(las, Classification %in% c(2,3,4,5,8))
# Normalizing the point cloud
lasn <- normalize_height(las, tin())
plot(las)
i<-2
#Read single laz
las <- readLAS(listaLAS[i])
# Filter ground and vegetation returns
las <- filter_poi(las, Classification %in% c(2,3,4,5,8))
# Normalizing the point cloud
lasn <- normalize_height(las, knnidw(k = 8, p = 2))
plot(las)
# Normalizing the point cloud
lasn <- normalize_height(las, knnidw(k = 20, p = 2))
listaLAS[i]
# Normalizing the point cloud
lasn <- normalize_height(las, kriging())#knnidw(k = 8, p = 2))
# Normalizing the point cloud
lasn <- normalize_height(las, kriging(k=8))#knnidw(k = 8, p = 2))
summary(las$Z)
las$Z
#Read single laz
las <- readLAS(listaLAS[i])
i
i
listaLAS[i]
listaLAS[i]
rm(list=ls())
# List of laz (las) files
listaLAS <- list.files("data/",
pattern = ".laz$",
full.names = T)
# List of names without path
names <- list.files("data",
pattern = ".laz$",
full.names = F)
# file names
names <- substr(names,1,nchar(names)-4)
# output folder (remember to create it before running the code)
out.dir <- "results/"
i<-2
#Read single laz
las <- readLAS(listaLAS[i])
las$Z
summary(las)
plot(las)
# Filter ground and vegetation returns
las <- filter_poi(las, Classification %in% c(2,3,4,5,8))
plot(las)
#Read single laz
las <- readLAS(listaLAS[i])
# Normalizing the point cloud
lasn <- normalize_height(las, knnidw(k = 8, p = 2))
# Filter ground and vegetation returns
las <- filter_poi(las, Classification %in% c(2,3,4,5,8))
# Normalizing the point cloud
lasn <- normalize_height(las, knnidw(k = 8, p = 2))
las <- na.omit(las)
# Normalizing the point cloud
lasn <- normalize_height(las, knnidw(k = 8, p = 2))
summary(las@data$Z)
View(las@data)
# Filter ground and vegetation returns
las <- filter_poi(las, Classification %in% c(2,3,4,5))
# Normalizing the point cloud
lasn <- normalize_height(las, knnidw(k = 8, p = 2))
#Read single laz
las <- readLAS(listaLAS[i])
# Filter ground and vegetation returns
las <- filter_poi(las, Classification %in% c(2,3,4,5))
# Normalizing the point cloud
lasn <- normalize_height(las, knnidw(k = 8, p = 2))
plot(las)
#Read single laz
las <- readLAS(listaLAS[i])
# Normalizing the point cloud
lasn <- normalize_height(las, knnidw(k = 8, p = 2))
#Read single laz
las <- readLAS(listaLAS[i], filter = "-drop_class 7")
# Normalizing the point cloud
lasn <- normalize_height(las, knnidw(k = 8, p = 2))
#Read single laz
las <- readLAS(listaLAS[i])
# Filter ground and vegetation returns
lasc <- filter_poi(las, Classification %in% c(2,3,4,5))
summary(las@data)
summary(as.data.frame(las@data))
i<-1
#Read single laz
las <- readLAS(listaLAS[i])
# List of laz (las) files
listaLAS <- list.files("data/",
pattern = ".laz$",
full.names = T)
# List of names without path
names <- list.files("data",
pattern = ".laz$",
full.names = F)
# file names
names <- substr(names,1,nchar(names)-4)
# output folder (remember to create it before running the code)
out.dir <- "results/"
# Looping through lasz tiles
for (i in 1:length(listaLAS)) {
#Read single laz
las <- readLAS(listaLAS[i])
# Filter ground and vegetation returns
lasc <- filter_poi(las, Classification %in% c(2,3,4,5))
# las <- na.omit(las)
# Normalizing the point cloud
lasn <- normalize_height(las, knnidw(k = 8, p = 2))
# Cleansing outliers
las_filt <- filter_poi(lasn, lasn@data$Z>=0 & lasn@data$Z<=35)
#####################################################################
########## CALCULATIN METRICS ###############
#####################################################################
# Selection of returns above 4 meter height and all vegetation returns
filt_FCC1 <- filter_poi (las_filt, las_filt@data$ReturnNumber==1 & las_filt@data$Z>4)
filt_FCC2 <- filter_poi (las_filt, las_filt@data$ReturnNumber==1 )
f_FCC <- function(x) {FCC1=(length(x))}
r_FCC1 <- grid_metrics(filt_FCC1,f_FCC(Z),res=20)
r_FCC2 <- grid_metrics(filt_FCC2,f_FCC(Z),res=20)
# FCC
r_FCC <- (r_FCC1/r_FCC2)*100
writeRaster(r_FCC,paste0(out.dir,names[i],"_FCC.tif"))
#Tree height
f_p95 = function(x) {p95 = quantile(x, 0.95)}
r_p95 <- grid_metrics(las_filt, f_p95(Z), res = 20)
writeRaster(r_p95,paste0(out.dir,names[i],"_p95.tif"))
# Canopy Relief Ratio (CRR)
f_CRR <- function(x) {CRR=(mean(x)-min(x))/(max(x)-min(x))}
r_CRR <- grid_metrics(las_filt, f_CRR(Z))
writeRaster(r_CRR,paste0(out.dir,names[i],"_CRR.tif"))
# Asymetry and kurtosis
f_curt <- function(x) {kurt= kurtosis(x)}
r_curt <- grid_metrics(las_filt, f_curt(Z))
writeRaster(r_curt,paste0(out.dir,names[i],"_curt.tif"))
f_asimetria <- function(x) {asimetria= skewness(x)}
r_asimetria <- grid_metrics(las_filt, f_asimetria(Z))
writeRaster(r_asimetria,paste0(out.dir,names[i],"_asimetria.tif"))
print(paste0(i,"/",length(listaLAS)))
}
i
blogdown::serve_site()
